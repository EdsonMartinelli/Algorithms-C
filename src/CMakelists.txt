message(STATUS "[Compiling] HashMap.")
add_library(hashmap STATIC implementations/hashmap.c $<TARGET_OBJECTS:linkedlist>)

message(STATUS "[Compiling] HeapSort.")
add_library(heapsort STATIC implementations/heapsort.c)

message(STATUS "[Compiling] Infinity Array.")
add_library(infinityarray STATIC implementations/infinityarray.c)

message(STATUS "[Compiling] Linked List.")
add_library(linkedlist STATIC implementations/linkedlist.c)

message(STATUS "[Compiling] Priority Queue.")
add_library(priorityqueue STATIC implementations/priorityqueue.c)

message(STATUS "[Compiling] Vector.")
add_library(vector STATIC implementations/vector.c)

message(STATUS "[Compiling] Binary Tree.")
add_library(binarytree STATIC implementations/binarytree.c)

message(STATUS "[Compiling] AVL Tree.")
add_library(avltree STATIC implementations/avltree.c)

message(STATUS "[Compiling] QuickSort.")
add_library(quicksort STATIC implementations/quicksort.c)

file(GLOB MAIN_FILES executables/*.c)

foreach(DIR_FILE_NAME IN LISTS MAIN_FILES)
    get_filename_component(FILE_NAME ${DIR_FILE_NAME} NAME_WLE)
    string(REPLACE "main_" "" FILE_NAME_OUTPUT ${FILE_NAME})
    add_executable(${FILE_NAME}.out executables/${FILE_NAME}.c)
    message(STATUS "[Linking] ${FILE_NAME_OUTPUT}.")
    target_link_libraries(${FILE_NAME}.out ${FILE_NAME_OUTPUT})
endforeach()
