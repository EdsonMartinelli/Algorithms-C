message(STATUS "[Compiling] HashMap.")
add_library(hashmap STATIC implementations/hashmap.c $<TARGET_OBJECTS:linkedlist>)
#target_link_libraries(hashmap linkedlist)

message(STATUS "[Compiling] HeapSort.")
add_library(heapsort STATIC implementations/heapsort.c)

message(STATUS "[Compiling] Infinity Array.")
add_library(infinityarray STATIC implementations/infinityarray.c)

message(STATUS "[Compiling] Linked List.")
add_library(linkedlist STATIC implementations/linkedlist.c)

message(STATUS "[Compiling] Priority Queue.")
add_library(priorityqueue STATIC implementations/priorityqueue.c)

message(STATUS "[Compiling] Vector.")
add_library(vector STATIC implementations/vector.c)

message(STATUS "[Compiling] Binary Tree.")
add_library(binarytree STATIC implementations/binarytree.c)


#-------------------------------------------------------------------------------

#[[add_executable(main_hashmap.out executables/main_hashmap.c)
message(STATUS "[Linking] HashMap - Main.")
target_link_libraries(main_hashmap.out hashmap)

add_executable(main_heapsort.out executables/main_heapsort.c)
message(STATUS "[Linking] HeapSort - Main.")
target_link_libraries(main_heapsort.out heapsort)

add_executable(main_infinityarray.out executables/main_infinityarray.c)
message(STATUS "[Linking] Infinity Array - Main.")
target_link_libraries(main_infinityarray.out infinityarray)

add_executable(main_linkedlist.out executables/main_linkedlist.c)
message(STATUS "[Linking] Linked List - Main.")
target_link_libraries(main_linkedlist.out linkedlist)

add_executable(main_priorityqueue.out executables/main_priorityqueue.c)
message(STATUS "[Linking] Priority Queue - Main.")
target_link_libraries(main_priorityqueue.out priorityqueue)

add_executable(main_vector.out executables/main_vector.c)
message(STATUS "[Linking] Vector - Main.")
target_link_libraries(main_vector.out vector)]]


#[[list(
APPEND MAIN_FILES
"main_hashmap"
"main_heapsort"
"main_infinityarray"
"main_linkedlist"
"main_priorityqueue"
"main_vector"
)]]

file(GLOB MAIN_FILES executables/*.c)

foreach(DIR_FILE_NAME IN LISTS MAIN_FILES)
    get_filename_component(FILE_NAME ${DIR_FILE_NAME} NAME_WLE)
    string(REPLACE "main_" "" FILE_NAME_OUTPUT ${FILE_NAME})
    add_executable(${FILE_NAME}.out executables/${FILE_NAME}.c)
    message(STATUS "[Linking] ${FILE_NAME_OUTPUT}.")
    target_link_libraries(${FILE_NAME}.out ${FILE_NAME_OUTPUT})
endforeach()
